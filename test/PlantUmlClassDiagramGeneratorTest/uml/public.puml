@startuml
class ClassA {
    + PropD : string <<get>>
    + ClassA()
    {static} ClassA()
    + <<override>> ToString() : string
    + {static} StaticMethod() : string
    + ExpressonBodiedMethod(x:int) : void
}
abstract class ClassB {
    + {abstract} PropA : int <<get>> <<protected set>>
    + {abstract} AbstractMethod(arg1:int, arg2:double) : string
}
class ClassC <<sealed>> {
    + <<override>> PropA : int <<get>> <<protected set>> = 100
    +  <<event>> PropertyChanged : PropertyChangedEventHandler 
    + <<override>> AbstractMethod(arg1:int, arg2:double) : string
}
class Vector <<struct>> {
    + X : double <<get>>
    + Y : double <<get>>
    + Z : double <<get>>
    + Vector(x:double, y:double, z:double)
    + Vector(source:Vector)
}
enum EnumA {
    AA= 0x0001,
    BB= 0x0002,
    CC= 0x0004,
    DD= 0x0008,
    EE= 0x0010,
}
class NestedClass {
    + A : int <<get>>
    + B : InnerClass <<get>>
}
class InnerClass {
    + X : string <<get>> = "xx"
    + MethodX() : void
}
class InnerStruct <<struct>> {
    + A : int <<get>>
    + InnerStruct(a:int)
}
InnerClass +-- InnerStruct
ClassA "publicA" <-- ClassB
ClassB <|-- ClassC
INotifyPropertyChanged <|-- ClassC
NestedClass +-- InnerClass
@enduml
